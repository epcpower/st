name: CI

on:
  push:
    branches:
      - "**" #double star includes a '/'.  single star doesnt match a '/'
    tags:
      - "**" #double star includes a '/'.  single star doesnt match a '/'
  schedule:
    # Daily at 05:44
    - cron: '44 5 * * *'

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSION: 3.7.9
  #Supports deploy_win finding python license for the epyq installer
  PYTHON: c:/hostedtoolcache/windows/Python/3.7.9/x64


jobs:
  build:
    name: CI
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Setup Venv
        run: |
          #install poetry
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry

          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .
          poetry install
      - name: python commands
        env:
          PHRASE: ${{ secrets.AUTOPARAMETERS_PASSPHRASE }}
        run: |
          set -vx
          poetry run buildui
          poetry run poetry-dynamic-versioning
          poetry run python ./generate_versioning.py
          .venv/Scripts/black --exclude=.\.venv --check --diff .
          .venv/Scripts/python download_fonts.py src/libs
          .venv/Scripts/genbuildinfo "src/epyq/_build.py"
          .venv/Scripts/pip freeze --all

          if [ -n "$PHRASE" ]; then echo -n "$PHRASE" > sub/epyqlib/epyqlib/resources/code; fi

          readlink --canonicalize-missing qtifw

          curl --location --output qtifw.exe "https://download.qt.io/official_releases/qt-installer-framework/4.1.1/QtInstallerFramework-windows-x86-4.1.1.exe"
          ./qtifw.exe in --al -c --root $(readlink --canonicalize-missing qtifw)


          .venv/Scripts/python pinsis.py --qtifw
          mkdir artifacts

          mv ../*.exe artifacts/

          .venv/Scripts/autodevice create template --zip="artifacts/autodevice_template-$(.venv/Scripts/python -c 'import epyq; print(f"{epyq.__version_tag__}-{epyq.__build_tag__}", end="")').zip"

          curl --location --output PeakOemDrv.exe "https://www.peak-system.com/produktcd/Drivers/PeakOemDrv.exe"
          ls
          # TODO: Add this back.  Removed since it is not mandatory and was
          #       hanging the build in GitHub Actions.  Maybe due to Windows
          #       popping up a dialog asking for authorization to install it?
          # ./PeakOemDrv.exe /exenoui /qn ADDLOCAL=F_PNP_DVRS,F_PCANBASIC
          poetry run python -m pytest -vvvv -s --no-qt-log --run-factory sub/epyqlib/epyqlib/tests

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: epyq_st
          path: |
            artifacts/*
